// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : axi_async_fifo_wrapper.v
// Device     : gemini
// LiteX sha1 : --------
// Date       : 2023-01-12 15:20:48
//------------------------------------------------------------------------------
// This file is Copyright (c) 2022 RapidSilicon
//--------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module axi_async_fifo_wrapper (
	output wire m_axi_awvalid,
	input  wire m_axi_awready,
	output wire [31:0] m_axi_awaddr,
	output wire [1:0] m_axi_awburst,
	output wire [7:0] m_axi_awlen,
	output wire [3:0] m_axi_awsize,
	output wire [1:0] m_axi_awlock,
	output wire [2:0] m_axi_awprot,
	output wire [3:0] m_axi_awcache,
	output wire [3:0] m_axi_awqos,
	output wire [3:0] m_axi_awregion,
	input  wire [7:0] m_axi_awid,
	input  wire m_axi_awdest,
	input  wire m_axi_awuser,
	output wire m_axi_wvalid,
	input  wire m_axi_wready,
	output wire m_axi_wlast,
	output wire [31:0] m_axi_wdata,
	output wire [3:0] m_axi_wstrb,
	input  wire [7:0] m_axi_wid,
	input  wire m_axi_wdest,
	input  wire m_axi_wuser,
	input  wire m_axi_bvalid,
	output wire m_axi_bready,
	input  wire [1:0] m_axi_bresp,
	input  wire [7:0] m_axi_bid,
	input  wire m_axi_bdest,
	input  wire m_axi_buser,
	output wire m_axi_arvalid,
	input  wire m_axi_arready,
	output wire [31:0] m_axi_araddr,
	output wire [1:0] m_axi_arburst,
	output wire [7:0] m_axi_arlen,
	output wire [3:0] m_axi_arsize,
	output wire [1:0] m_axi_arlock,
	output wire [2:0] m_axi_arprot,
	output wire [3:0] m_axi_arcache,
	output wire [3:0] m_axi_arqos,
	output wire [3:0] m_axi_arregion,
	input  wire [7:0] m_axi_arid,
	input  wire m_axi_ardest,
	input  wire m_axi_aruser,
	input  wire m_axi_rvalid,
	output wire m_axi_rready,
	input  wire m_axi_rlast,
	input  wire [1:0] m_axi_rresp,
	input  wire [31:0] m_axi_rdata,
	input  wire [7:0] m_axi_rid,
	input  wire m_axi_rdest,
	input  wire m_axi_ruser,
	input  wire s_axi_awvalid,
	output wire s_axi_awready,
	input  wire [31:0] s_axi_awaddr,
	input  wire [1:0] s_axi_awburst,
	input  wire [7:0] s_axi_awlen,
	input  wire [3:0] s_axi_awsize,
	input  wire [1:0] s_axi_awlock,
	input  wire [2:0] s_axi_awprot,
	input  wire [3:0] s_axi_awcache,
	input  wire [3:0] s_axi_awqos,
	input  wire [3:0] s_axi_awregion,
	input  wire [7:0] s_axi_awid,
	input  wire s_axi_awdest,
	input  wire s_axi_awuser,
	input  wire s_axi_wvalid,
	output wire s_axi_wready,
	input  wire s_axi_wlast,
	input  wire [31:0] s_axi_wdata,
	input  wire [3:0] s_axi_wstrb,
	input  wire [7:0] s_axi_wid,
	input  wire s_axi_wdest,
	input  wire s_axi_wuser,
	output wire s_axi_bvalid,
	input  wire s_axi_bready,
	output wire [1:0] s_axi_bresp,
	input  wire [7:0] s_axi_bid,
	input  wire s_axi_bdest,
	input  wire s_axi_buser,
	input  wire s_axi_arvalid,
	output wire s_axi_arready,
	input  wire [31:0] s_axi_araddr,
	input  wire [1:0] s_axi_arburst,
	input  wire [7:0] s_axi_arlen,
	input  wire [3:0] s_axi_arsize,
	input  wire [1:0] s_axi_arlock,
	input  wire [2:0] s_axi_arprot,
	input  wire [3:0] s_axi_arcache,
	input  wire [3:0] s_axi_arqos,
	input  wire [3:0] s_axi_arregion,
	input  wire [7:0] s_axi_arid,
	input  wire s_axi_ardest,
	input  wire s_axi_aruser,
	output wire s_axi_rvalid,
	input  wire s_axi_rready,
	output wire s_axi_rlast,
	output wire [1:0] s_axi_rresp,
	output wire [31:0] s_axi_rdata,
	input  wire [7:0] s_axi_rid,
	input  wire s_axi_rdest,
	input  wire s_axi_ruser,
	input  wire m_clk,
	input  wire m_rst,
	input  wire s_clk,
	input  wire s_rst
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire m_axi_aw_valid;
wire m_axi_aw_ready;
wire [31:0] m_axi_aw_payload_addr;
wire [1:0] m_axi_aw_payload_burst;
wire [7:0] m_axi_aw_payload_len;
wire [3:0] m_axi_aw_payload_size;
wire [1:0] m_axi_aw_payload_lock;
wire [2:0] m_axi_aw_payload_prot;
wire [3:0] m_axi_aw_payload_cache;
wire [3:0] m_axi_aw_payload_qos;
reg  [3:0] m_axi_aw_payload_region = 4'd0;
wire [7:0] m_axi_aw_param_id;
wire m_axi_w_valid;
wire m_axi_w_ready;
wire m_axi_w_last;
wire [31:0] m_axi_w_payload_data;
wire [3:0] m_axi_w_payload_strb;
wire m_axi_b_valid;
wire m_axi_b_ready;
wire [1:0] m_axi_b_payload_resp;
reg  [7:0] m_axi_b_param_id = 8'd0;
wire m_axi_ar_valid;
wire m_axi_ar_ready;
wire [31:0] m_axi_ar_payload_addr;
wire [1:0] m_axi_ar_payload_burst;
wire [7:0] m_axi_ar_payload_len;
wire [3:0] m_axi_ar_payload_size;
wire [1:0] m_axi_ar_payload_lock;
wire [2:0] m_axi_ar_payload_prot;
wire [3:0] m_axi_ar_payload_cache;
wire [3:0] m_axi_ar_payload_qos;
reg  [3:0] m_axi_ar_payload_region = 4'd0;
wire [7:0] m_axi_ar_param_id;
wire m_axi_r_valid;
wire m_axi_r_ready;
wire m_axi_r_last;
wire [1:0] m_axi_r_payload_resp;
wire [31:0] m_axi_r_payload_data;
reg  [7:0] m_axi_r_param_id = 8'd0;
wire s_axi_aw_valid;
wire s_axi_aw_ready;
wire [31:0] s_axi_aw_payload_addr;
wire [1:0] s_axi_aw_payload_burst;
wire [7:0] s_axi_aw_payload_len;
wire [3:0] s_axi_aw_payload_size;
wire [1:0] s_axi_aw_payload_lock;
wire [2:0] s_axi_aw_payload_prot;
wire [3:0] s_axi_aw_payload_cache;
wire [3:0] s_axi_aw_payload_qos;
wire [3:0] s_axi_aw_payload_region;
reg  [7:0] s_axi_aw_param_id = 8'd0;
wire s_axi_w_valid;
wire s_axi_w_ready;
wire s_axi_w_last;
wire [31:0] s_axi_w_payload_data;
wire [3:0] s_axi_w_payload_strb;
wire s_axi_b_valid;
wire s_axi_b_ready;
wire [1:0] s_axi_b_payload_resp;
wire [7:0] s_axi_b_param_id;
wire s_axi_ar_valid;
wire s_axi_ar_ready;
wire [31:0] s_axi_ar_payload_addr;
wire [1:0] s_axi_ar_payload_burst;
wire [7:0] s_axi_ar_payload_len;
wire [3:0] s_axi_ar_payload_size;
wire [1:0] s_axi_ar_payload_lock;
wire [2:0] s_axi_ar_payload_prot;
wire [3:0] s_axi_ar_payload_cache;
wire [3:0] s_axi_ar_payload_qos;
wire [3:0] s_axi_ar_payload_region;
reg  [7:0] s_axi_ar_param_id = 8'd0;
wire s_axi_r_valid;
wire s_axi_r_ready;
wire s_axi_r_last;
wire [1:0] s_axi_r_payload_resp;
wire [31:0] s_axi_r_payload_data;
wire [7:0] s_axi_r_param_id;
wire m_clk_1;
wire m_rst_1;
wire s_clk_1;
wire s_rst_1;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign m_axi_awvalid = m_axi_aw_valid;
assign m_axi_awaddr = m_axi_aw_payload_addr;
assign m_axi_awburst = m_axi_aw_payload_burst;
assign m_axi_awlen = m_axi_aw_payload_len;
assign m_axi_awsize = m_axi_aw_payload_size;
assign m_axi_awlock = m_axi_aw_payload_lock;
assign m_axi_awprot = m_axi_aw_payload_prot;
assign m_axi_awcache = m_axi_aw_payload_cache;
assign m_axi_awqos = m_axi_aw_payload_qos;
assign m_axi_awregion = m_axi_aw_payload_region;
assign m_axi_aw_ready = m_axi_awready;
assign m_axi_wvalid = m_axi_w_valid;
assign m_axi_wdata = m_axi_w_payload_data;
assign m_axi_wstrb = m_axi_w_payload_strb;
assign m_axi_wlast = m_axi_w_last;
assign m_axi_w_ready = m_axi_wready;
assign m_axi_b_valid = m_axi_bvalid;
assign m_axi_b_payload_resp = m_axi_bresp;
assign m_axi_bready = m_axi_b_ready;
assign m_axi_arvalid = m_axi_ar_valid;
assign m_axi_araddr = m_axi_ar_payload_addr;
assign m_axi_arburst = m_axi_ar_payload_burst;
assign m_axi_arlen = m_axi_ar_payload_len;
assign m_axi_arsize = m_axi_ar_payload_size;
assign m_axi_arlock = m_axi_ar_payload_lock;
assign m_axi_arprot = m_axi_ar_payload_prot;
assign m_axi_arcache = m_axi_ar_payload_cache;
assign m_axi_arqos = m_axi_ar_payload_qos;
assign m_axi_arregion = m_axi_ar_payload_region;
assign m_axi_ar_ready = m_axi_arready;
assign m_axi_r_valid = m_axi_rvalid;
assign m_axi_r_payload_resp = m_axi_rresp;
assign m_axi_r_payload_data = m_axi_rdata;
assign m_axi_r_last = m_axi_rlast;
assign m_axi_rready = m_axi_r_ready;
assign s_axi_aw_valid = s_axi_awvalid;
assign s_axi_aw_payload_addr = s_axi_awaddr;
assign s_axi_aw_payload_burst = s_axi_awburst;
assign s_axi_aw_payload_len = s_axi_awlen;
assign s_axi_aw_payload_size = s_axi_awsize;
assign s_axi_aw_payload_lock = s_axi_awlock;
assign s_axi_aw_payload_prot = s_axi_awprot;
assign s_axi_aw_payload_cache = s_axi_awcache;
assign s_axi_aw_payload_qos = s_axi_awqos;
assign s_axi_aw_payload_region = s_axi_awregion;
assign s_axi_awready = s_axi_aw_ready;
assign s_axi_w_valid = s_axi_wvalid;
assign s_axi_w_payload_data = s_axi_wdata;
assign s_axi_w_payload_strb = s_axi_wstrb;
assign s_axi_w_last = s_axi_wlast;
assign s_axi_wready = s_axi_w_ready;
assign s_axi_bvalid = s_axi_b_valid;
assign s_axi_bresp = s_axi_b_payload_resp;
assign s_axi_b_ready = s_axi_bready;
assign s_axi_ar_valid = s_axi_arvalid;
assign s_axi_ar_payload_addr = s_axi_araddr;
assign s_axi_ar_payload_burst = s_axi_arburst;
assign s_axi_ar_payload_len = s_axi_arlen;
assign s_axi_ar_payload_size = s_axi_arsize;
assign s_axi_ar_payload_lock = s_axi_arlock;
assign s_axi_ar_payload_prot = s_axi_arprot;
assign s_axi_ar_payload_cache = s_axi_arcache;
assign s_axi_ar_payload_qos = s_axi_arqos;
assign s_axi_ar_payload_region = s_axi_arregion;
assign s_axi_arready = s_axi_ar_ready;
assign s_axi_rvalid = s_axi_r_valid;
assign s_axi_rresp = s_axi_r_payload_resp;
assign s_axi_rdata = s_axi_r_payload_data;
assign s_axi_rlast = s_axi_r_last;
assign s_axi_r_ready = s_axi_rready;
assign m_clk_1 = m_clk;
assign m_rst_1 = m_rst;
assign s_clk_1 = s_clk;
assign s_rst_1 = s_rst;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

axi_async_fifo #(
	.AXI_ADDR_WIDTH(6'd32),
	.AXI_DATA_WIDTH(6'd32),
	.AXI_ID_WIDTH(4'd8),
	.FIFO_LOG(3'd7)
) axi_async_fifo (
	.M_AXI_ACLK(m_clk_1),
	.M_AXI_ARESET(m_rst_1),
	.M_AXI_ARREADY(m_axi_ar_ready),
	.M_AXI_AWREADY(m_axi_aw_ready),
	.M_AXI_BID(m_axi_b_param_id),
	.M_AXI_BRESP(m_axi_b_payload_resp),
	.M_AXI_BVALID(m_axi_b_valid),
	.M_AXI_RDATA(m_axi_r_payload_data),
	.M_AXI_RID(m_axi_r_param_id),
	.M_AXI_RLAST(m_axi_r_last),
	.M_AXI_RRESP(m_axi_r_payload_resp),
	.M_AXI_RVALID(m_axi_r_valid),
	.M_AXI_WREADY(m_axi_w_ready),
	.S_AXI_ACLK(s_clk_1),
	.S_AXI_ARADDR(s_axi_ar_payload_addr),
	.S_AXI_ARBURST(s_axi_ar_payload_burst),
	.S_AXI_ARCACHE(s_axi_ar_payload_cache),
	.S_AXI_ARESET(s_rst_1),
	.S_AXI_ARID(s_axi_ar_param_id),
	.S_AXI_ARLEN(s_axi_ar_payload_len),
	.S_AXI_ARLOCK(s_axi_ar_payload_lock),
	.S_AXI_ARPROT(s_axi_ar_payload_prot),
	.S_AXI_ARQOS(s_axi_ar_payload_qos),
	.S_AXI_ARSIZE(s_axi_ar_payload_size),
	.S_AXI_ARVALID(s_axi_ar_valid),
	.S_AXI_AWADDR(s_axi_aw_payload_addr),
	.S_AXI_AWBURST(s_axi_aw_payload_burst),
	.S_AXI_AWCACHE(s_axi_aw_payload_cache),
	.S_AXI_AWID(s_axi_aw_param_id),
	.S_AXI_AWLEN(s_axi_aw_payload_len),
	.S_AXI_AWLOCK(s_axi_aw_payload_lock),
	.S_AXI_AWPROT(s_axi_aw_payload_prot),
	.S_AXI_AWQOS(s_axi_aw_payload_qos),
	.S_AXI_AWSIZE(s_axi_aw_payload_size),
	.S_AXI_AWVALID(s_axi_aw_valid),
	.S_AXI_BREADY(s_axi_b_ready),
	.S_AXI_RREADY(s_axi_r_ready),
	.S_AXI_WDATA(s_axi_w_payload_data),
	.S_AXI_WLAST(s_axi_w_last),
	.S_AXI_WSTRB(s_axi_w_payload_strb),
	.S_AXI_WVALID(s_axi_w_valid),
	.M_AXI_ARADDR(m_axi_ar_payload_addr),
	.M_AXI_ARBURST(m_axi_ar_payload_burst),
	.M_AXI_ARCACHE(m_axi_ar_payload_cache),
	.M_AXI_ARID(m_axi_ar_param_id),
	.M_AXI_ARLEN(m_axi_ar_payload_len),
	.M_AXI_ARLOCK(m_axi_ar_payload_lock),
	.M_AXI_ARPROT(m_axi_ar_payload_prot),
	.M_AXI_ARQOS(m_axi_ar_payload_qos),
	.M_AXI_ARSIZE(m_axi_ar_payload_size),
	.M_AXI_ARVALID(m_axi_ar_valid),
	.M_AXI_AWADDR(m_axi_aw_payload_addr),
	.M_AXI_AWBURST(m_axi_aw_payload_burst),
	.M_AXI_AWCACHE(m_axi_aw_payload_cache),
	.M_AXI_AWID(m_axi_aw_param_id),
	.M_AXI_AWLEN(m_axi_aw_payload_len),
	.M_AXI_AWLOCK(m_axi_aw_payload_lock),
	.M_AXI_AWPROT(m_axi_aw_payload_prot),
	.M_AXI_AWQOS(m_axi_aw_payload_qos),
	.M_AXI_AWSIZE(m_axi_aw_payload_size),
	.M_AXI_AWVALID(m_axi_aw_valid),
	.M_AXI_BREADY(m_axi_b_ready),
	.M_AXI_RREADY(m_axi_r_ready),
	.M_AXI_WDATA(m_axi_w_payload_data),
	.M_AXI_WLAST(m_axi_w_last),
	.M_AXI_WSTRB(m_axi_w_payload_strb),
	.M_AXI_WVALID(m_axi_w_valid),
	.S_AXI_ARREADY(s_axi_ar_ready),
	.S_AXI_AWREADY(s_axi_aw_ready),
	.S_AXI_BID(s_axi_b_param_id),
	.S_AXI_BRESP(s_axi_b_payload_resp),
	.S_AXI_BVALID(s_axi_b_valid),
	.S_AXI_RDATA(s_axi_r_payload_data),
	.S_AXI_RID(s_axi_r_param_id),
	.S_AXI_RLAST(s_axi_r_last),
	.S_AXI_RRESP(s_axi_r_payload_resp),
	.S_AXI_RVALID(s_axi_r_valid),
	.S_AXI_WREADY(s_axi_w_ready)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2023-01-12 15:20:48.
//------------------------------------------------------------------------------
