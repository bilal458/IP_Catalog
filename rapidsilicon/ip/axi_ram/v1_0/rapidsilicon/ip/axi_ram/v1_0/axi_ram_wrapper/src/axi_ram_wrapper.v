// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : axi_ram_wrapper.v
// Device     : gemini
// LiteX sha1 : 611b84cc
// Date       : 2023-02-16 10:26:09
//------------------------------------------------------------------------------
// This file is Copyright (c) 2022 RapidSilicon
//--------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module axi_ram_wrapper (
    input  wire          clk,
    input  wire          rst,
    input  wire          s_axi_awvalid,
    output wire          s_axi_awready,
    input  wire   [15:0] s_axi_awaddr,
    input  wire    [1:0] s_axi_awburst,
    input  wire    [7:0] s_axi_awlen,
    input  wire    [3:0] s_axi_awsize,
    input  wire    [1:0] s_axi_awlock,
    input  wire    [2:0] s_axi_awprot,
    input  wire    [3:0] s_axi_awcache,
    input  wire    [3:0] s_axi_awqos,
    input  wire    [3:0] s_axi_awregion,
    input  wire    [7:0] s_axi_awid,
    input  wire          s_axi_awdest,
    input  wire          s_axi_awuser,
    input  wire          s_axi_wvalid,
    output wire          s_axi_wready,
    input  wire          s_axi_wlast,
    input  wire   [31:0] s_axi_wdata,
    input  wire    [3:0] s_axi_wstrb,
    input  wire          s_axi_wdest,
    input  wire          s_axi_wuser,
    output wire          s_axi_bvalid,
    input  wire          s_axi_bready,
    output wire    [1:0] s_axi_bresp,
    output wire    [7:0] s_axi_bid,
    output wire          s_axi_bdest,
    output wire          s_axi_buser,
    input  wire          s_axi_arvalid,
    output wire          s_axi_arready,
    input  wire   [15:0] s_axi_araddr,
    input  wire    [1:0] s_axi_arburst,
    input  wire    [7:0] s_axi_arlen,
    input  wire    [3:0] s_axi_arsize,
    input  wire    [1:0] s_axi_arlock,
    input  wire    [2:0] s_axi_arprot,
    input  wire    [3:0] s_axi_arcache,
    input  wire    [3:0] s_axi_arqos,
    input  wire    [3:0] s_axi_arregion,
    input  wire    [7:0] s_axi_arid,
    input  wire          s_axi_ardest,
    input  wire          s_axi_aruser,
    output wire          s_axi_rvalid,
    input  wire          s_axi_rready,
    output wire          s_axi_rlast,
    output wire    [1:0] s_axi_rresp,
    output wire   [31:0] s_axi_rdata,
    output wire    [7:0] s_axi_rid,
    output wire          s_axi_rdest,
    output wire          s_axi_ruser
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire          sys_clk;
wire          sys_rst;
wire          aw_valid;
wire          aw_ready;
wire   [15:0] aw_payload_addr;
wire    [1:0] aw_payload_burst;
wire    [7:0] aw_payload_len;
wire    [3:0] aw_payload_size;
wire    [1:0] aw_payload_lock;
wire    [2:0] aw_payload_prot;
wire    [3:0] aw_payload_cache;
wire    [3:0] aw_payload_qos;
wire    [3:0] aw_payload_region;
wire    [7:0] aw_param_id;
wire          aw_param_dest;
wire          aw_param_user;
wire          w_valid;
wire          w_ready;
wire          w_last;
wire   [31:0] w_payload_data;
wire    [3:0] w_payload_strb;
wire          w_param_dest;
wire          w_param_user;
wire          b_valid;
wire          b_ready;
wire    [1:0] b_payload_resp;
wire    [7:0] b_param_id;
reg           b_param_dest = 1'd0;
reg           b_param_user = 1'd0;
wire          ar_valid;
wire          ar_ready;
wire   [15:0] ar_payload_addr;
wire    [1:0] ar_payload_burst;
wire    [7:0] ar_payload_len;
wire    [3:0] ar_payload_size;
wire    [1:0] ar_payload_lock;
wire    [2:0] ar_payload_prot;
wire    [3:0] ar_payload_cache;
wire    [3:0] ar_payload_qos;
wire    [3:0] ar_payload_region;
wire    [7:0] ar_param_id;
wire          ar_param_dest;
wire          ar_param_user;
wire          r_valid;
wire          r_ready;
wire          r_last;
wire    [1:0] r_payload_resp;
wire   [31:0] r_payload_data;
wire    [7:0] r_param_id;
reg           r_param_dest = 1'd0;
reg           r_param_user = 1'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign sys_clk = clk;
assign sys_rst = rst;
assign aw_valid = s_axi_awvalid;
assign aw_payload_addr = s_axi_awaddr;
assign aw_payload_burst = s_axi_awburst;
assign aw_payload_len = s_axi_awlen;
assign aw_payload_size = s_axi_awsize;
assign aw_payload_lock = s_axi_awlock;
assign aw_payload_prot = s_axi_awprot;
assign aw_payload_cache = s_axi_awcache;
assign aw_payload_qos = s_axi_awqos;
assign aw_payload_region = s_axi_awregion;
assign aw_param_id = s_axi_awid;
assign aw_param_dest = s_axi_awdest;
assign aw_param_user = s_axi_awuser;
assign s_axi_awready = aw_ready;
assign w_valid = s_axi_wvalid;
assign w_payload_data = s_axi_wdata;
assign w_payload_strb = s_axi_wstrb;
assign w_param_dest = s_axi_wdest;
assign w_param_user = s_axi_wuser;
assign w_last = s_axi_wlast;
assign s_axi_wready = w_ready;
assign s_axi_bvalid = b_valid;
assign s_axi_bresp = b_payload_resp;
assign s_axi_bid = b_param_id;
assign s_axi_bdest = b_param_dest;
assign s_axi_buser = b_param_user;
assign b_ready = s_axi_bready;
assign ar_valid = s_axi_arvalid;
assign ar_payload_addr = s_axi_araddr;
assign ar_payload_burst = s_axi_arburst;
assign ar_payload_len = s_axi_arlen;
assign ar_payload_size = s_axi_arsize;
assign ar_payload_lock = s_axi_arlock;
assign ar_payload_prot = s_axi_arprot;
assign ar_payload_cache = s_axi_arcache;
assign ar_payload_qos = s_axi_arqos;
assign ar_payload_region = s_axi_arregion;
assign ar_param_id = s_axi_arid;
assign ar_param_dest = s_axi_ardest;
assign ar_param_user = s_axi_aruser;
assign s_axi_arready = ar_ready;
assign s_axi_rvalid = r_valid;
assign s_axi_rresp = r_payload_resp;
assign s_axi_rdata = r_payload_data;
assign s_axi_rid = r_param_id;
assign s_axi_rdest = r_param_dest;
assign s_axi_ruser = r_param_user;
assign s_axi_rlast = r_last;
assign r_ready = s_axi_rready;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

axi_ram #(
	.ADDR_WIDTH(16),
	.DATA_WIDTH(32),
	.ID_WIDTH(8),
	.PIPELINE_OUTPUT(1'd0)
) axi_ram (
	.clk(sys_clk),
	.rst(sys_rst),
	.s_axi_araddr(ar_payload_addr),
	.s_axi_arburst(ar_payload_burst),
	.s_axi_arcache(ar_payload_cache),
	.s_axi_arid(ar_param_id),
	.s_axi_arlen(ar_payload_len),
	.s_axi_arlock(ar_payload_lock),
	.s_axi_arprot(ar_payload_prot),
	.s_axi_arsize(ar_payload_size),
	.s_axi_arvalid(ar_valid),
	.s_axi_awaddr(aw_payload_addr),
	.s_axi_awburst(aw_payload_burst),
	.s_axi_awcache(aw_payload_cache),
	.s_axi_awid(aw_param_id),
	.s_axi_awlen(aw_payload_len),
	.s_axi_awlock(aw_payload_lock),
	.s_axi_awprot(aw_payload_prot),
	.s_axi_awsize(aw_payload_size),
	.s_axi_awvalid(aw_valid),
	.s_axi_bready(b_ready),
	.s_axi_rready(r_ready),
	.s_axi_wdata(w_payload_data),
	.s_axi_wlast(w_last),
	.s_axi_wstrb(w_payload_strb),
	.s_axi_wvalid(w_valid),
	.s_axi_arready(ar_ready),
	.s_axi_awready(aw_ready),
	.s_axi_bid(b_param_id),
	.s_axi_bresp(b_payload_resp),
	.s_axi_bvalid(b_valid),
	.s_axi_rdata(r_payload_data),
	.s_axi_rid(r_param_id),
	.s_axi_rlast(r_last),
	.s_axi_rresp(r_payload_resp),
	.s_axi_rvalid(r_valid),
	.s_axi_wready(w_ready)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2023-02-16 10:26:09.
//------------------------------------------------------------------------------
