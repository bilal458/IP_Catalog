// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : FIFO_generator.v
// Device     : gemini
// LiteX sha1 : a6d9955c
// Date       : 2023-07-12 11:47:54
//------------------------------------------------------------------------------
// This file is Copyright (c) 2022 RapidSilicon
//--------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module FIFO_generator (
    input  wire   [35:0] din,
    output wire   [35:0] dout,
    output wire          prog_full,
    output wire          prog_empty,
    input  wire          wrt_clock,
    input  wire          rd_clock,
    input  wire          rst,
    input  wire          wr_en,
    input  wire          rd_en,
    output wire          full,
    output wire          empty,
    output wire          underflow,
    output wire          overflow
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire          sys_rst;
wire          wrt_clk;
wire          wrt_rst;
wire          rd_clk;
wire          rd_rst;
reg    [12:0] wrt_ptr = 13'd0;
reg    [12:0] rd_ptr = 13'd0;
reg    [12:0] wrt_ptr_rd_clk1 = 13'd0;
reg    [12:0] wrt_ptr_rd_clk2 = 13'd0;
reg    [12:0] rd_ptr_wrt_clk1 = 13'd0;
reg    [12:0] rd_ptr_wrt_clk2 = 13'd0;
reg    [12:0] gray_encoded_rdptr = 13'd0;
reg    [12:0] gray_encoded_wrtptr = 13'd0;
reg    [12:0] sync_rdclk_wrtptr_binary = 13'd0;
reg    [12:0] sync_wrtclk_rdptr_binary = 13'd0;
reg           rd_en_flop = 1'd0;
reg     [1:0] empty_count = 2'd0;
reg    [12:0] wrt_ptr_reg = 13'd0;
reg    [12:0] rd_ptr_reg = 13'd0;
wire   [35:0] din_1;
reg    [35:0] dout0 = 36'd0;
wire          rden;
wire          wren;
reg           empty_1 = 1'd0;
reg           full_1 = 1'd0;
reg           underflow_1 = 1'd0;
reg           overflow_1 = 1'd0;
reg           prog_full_1 = 1'd0;
reg           prog_empty_1 = 1'd0;
reg           re = 1'd0;
reg           readable = 1'd0;
reg    [35:0] dout1 = 36'd0;
wire          asyncfifo_we;
wire          asyncfifo_writable;
wire          asyncfifo_re;
wire          asyncfifo_readable;
reg    [35:0] asyncfifo_din = 36'd0;
wire   [35:0] asyncfifo_dout;
wire          graycounter0_ce;
reg    [11:0] graycounter0_q = 12'd0;
wire   [11:0] graycounter0_q_next;
reg    [11:0] graycounter0_q_binary = 12'd0;
reg    [11:0] graycounter0_q_next_binary = 12'd0;
wire          graycounter1_ce;
reg    [11:0] graycounter1_q = 12'd0;
wire   [11:0] graycounter1_q_next;
reg    [11:0] graycounter1_q_binary = 12'd0;
reg    [11:0] graycounter1_q_next_binary = 12'd0;
wire   [11:0] produce_rdomain;
wire   [11:0] consume_wdomain;
wire   [10:0] wrport_adr;
wire   [35:0] wrport_dat_r;
wire          wrport_we;
wire   [35:0] wrport_dat_w;
wire   [10:0] rdport_adr;
wire   [35:0] rdport_dat_r;
reg           wr_en_1 = 1'd0;
reg    [11:0] multiregimpl0_regs0 = 12'd0;
reg    [11:0] multiregimpl0_regs1 = 12'd0;
reg    [11:0] multiregimpl1_regs0 = 12'd0;
reg    [11:0] multiregimpl1_regs1 = 12'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign din_1 = din;
assign dout = dout0;
assign prog_full = prog_full_1;
assign prog_empty = prog_empty_1;
assign wrt_clk = wrt_clock;
assign rd_clk = rd_clock;
assign sys_rst = rst;
assign wren = wr_en;
assign rden = rd_en;
assign full = full_1;
assign empty = empty_1;
assign underflow = underflow_1;
assign overflow = overflow_1;
assign wrt_rst = sys_rst;
assign rd_rst = sys_rst;
always @(*) begin
    asyncfifo_din <= 36'd0;
    if (wren) begin
        asyncfifo_din <= din_1;
    end
end
assign asyncfifo_we = wr_en_1;
always @(*) begin
    dout0 <= 36'd0;
    if (rden) begin
        if ((~empty_1)) begin
            dout0 <= dout1;
        end
    end
end
always @(*) begin
    gray_encoded_rdptr <= 13'd0;
    gray_encoded_rdptr[0] <= (rd_ptr[1] ^ rd_ptr[0]);
    gray_encoded_rdptr[1] <= (rd_ptr[2] ^ rd_ptr[1]);
    gray_encoded_rdptr[2] <= (rd_ptr[3] ^ rd_ptr[2]);
    gray_encoded_rdptr[3] <= (rd_ptr[4] ^ rd_ptr[3]);
    gray_encoded_rdptr[4] <= (rd_ptr[5] ^ rd_ptr[4]);
    gray_encoded_rdptr[5] <= (rd_ptr[6] ^ rd_ptr[5]);
    gray_encoded_rdptr[6] <= (rd_ptr[7] ^ rd_ptr[6]);
    gray_encoded_rdptr[7] <= (rd_ptr[8] ^ rd_ptr[7]);
    gray_encoded_rdptr[8] <= (rd_ptr[9] ^ rd_ptr[8]);
    gray_encoded_rdptr[9] <= (rd_ptr[10] ^ rd_ptr[9]);
    gray_encoded_rdptr[10] <= (rd_ptr[11] ^ rd_ptr[10]);
    gray_encoded_rdptr[11] <= rd_ptr[11];
    gray_encoded_rdptr[12] <= rd_ptr[12];
end
always @(*) begin
    gray_encoded_wrtptr <= 13'd0;
    gray_encoded_wrtptr[0] <= (wrt_ptr[1] ^ wrt_ptr[0]);
    gray_encoded_wrtptr[1] <= (wrt_ptr[2] ^ wrt_ptr[1]);
    gray_encoded_wrtptr[2] <= (wrt_ptr[3] ^ wrt_ptr[2]);
    gray_encoded_wrtptr[3] <= (wrt_ptr[4] ^ wrt_ptr[3]);
    gray_encoded_wrtptr[4] <= (wrt_ptr[5] ^ wrt_ptr[4]);
    gray_encoded_wrtptr[5] <= (wrt_ptr[6] ^ wrt_ptr[5]);
    gray_encoded_wrtptr[6] <= (wrt_ptr[7] ^ wrt_ptr[6]);
    gray_encoded_wrtptr[7] <= (wrt_ptr[8] ^ wrt_ptr[7]);
    gray_encoded_wrtptr[8] <= (wrt_ptr[9] ^ wrt_ptr[8]);
    gray_encoded_wrtptr[9] <= (wrt_ptr[10] ^ wrt_ptr[9]);
    gray_encoded_wrtptr[10] <= (wrt_ptr[11] ^ wrt_ptr[10]);
    gray_encoded_wrtptr[11] <= wrt_ptr[11];
    gray_encoded_wrtptr[12] <= wrt_ptr[12];
end
always @(*) begin
    sync_wrtclk_rdptr_binary <= 13'd0;
    sync_wrtclk_rdptr_binary[0] <= (((((((((((rd_ptr_wrt_clk2[0] ^ rd_ptr_wrt_clk2[1]) ^ rd_ptr_wrt_clk2[2]) ^ rd_ptr_wrt_clk2[3]) ^ rd_ptr_wrt_clk2[4]) ^ rd_ptr_wrt_clk2[5]) ^ rd_ptr_wrt_clk2[6]) ^ rd_ptr_wrt_clk2[7]) ^ rd_ptr_wrt_clk2[8]) ^ rd_ptr_wrt_clk2[9]) ^ rd_ptr_wrt_clk2[10]) ^ rd_ptr_wrt_clk2[11]);
    sync_wrtclk_rdptr_binary[1] <= ((((((((((rd_ptr_wrt_clk2[1] ^ rd_ptr_wrt_clk2[2]) ^ rd_ptr_wrt_clk2[3]) ^ rd_ptr_wrt_clk2[4]) ^ rd_ptr_wrt_clk2[5]) ^ rd_ptr_wrt_clk2[6]) ^ rd_ptr_wrt_clk2[7]) ^ rd_ptr_wrt_clk2[8]) ^ rd_ptr_wrt_clk2[9]) ^ rd_ptr_wrt_clk2[10]) ^ rd_ptr_wrt_clk2[11]);
    sync_wrtclk_rdptr_binary[2] <= (((((((((rd_ptr_wrt_clk2[2] ^ rd_ptr_wrt_clk2[3]) ^ rd_ptr_wrt_clk2[4]) ^ rd_ptr_wrt_clk2[5]) ^ rd_ptr_wrt_clk2[6]) ^ rd_ptr_wrt_clk2[7]) ^ rd_ptr_wrt_clk2[8]) ^ rd_ptr_wrt_clk2[9]) ^ rd_ptr_wrt_clk2[10]) ^ rd_ptr_wrt_clk2[11]);
    sync_wrtclk_rdptr_binary[3] <= ((((((((rd_ptr_wrt_clk2[3] ^ rd_ptr_wrt_clk2[4]) ^ rd_ptr_wrt_clk2[5]) ^ rd_ptr_wrt_clk2[6]) ^ rd_ptr_wrt_clk2[7]) ^ rd_ptr_wrt_clk2[8]) ^ rd_ptr_wrt_clk2[9]) ^ rd_ptr_wrt_clk2[10]) ^ rd_ptr_wrt_clk2[11]);
    sync_wrtclk_rdptr_binary[4] <= (((((((rd_ptr_wrt_clk2[4] ^ rd_ptr_wrt_clk2[5]) ^ rd_ptr_wrt_clk2[6]) ^ rd_ptr_wrt_clk2[7]) ^ rd_ptr_wrt_clk2[8]) ^ rd_ptr_wrt_clk2[9]) ^ rd_ptr_wrt_clk2[10]) ^ rd_ptr_wrt_clk2[11]);
    sync_wrtclk_rdptr_binary[5] <= ((((((rd_ptr_wrt_clk2[5] ^ rd_ptr_wrt_clk2[6]) ^ rd_ptr_wrt_clk2[7]) ^ rd_ptr_wrt_clk2[8]) ^ rd_ptr_wrt_clk2[9]) ^ rd_ptr_wrt_clk2[10]) ^ rd_ptr_wrt_clk2[11]);
    sync_wrtclk_rdptr_binary[6] <= (((((rd_ptr_wrt_clk2[6] ^ rd_ptr_wrt_clk2[7]) ^ rd_ptr_wrt_clk2[8]) ^ rd_ptr_wrt_clk2[9]) ^ rd_ptr_wrt_clk2[10]) ^ rd_ptr_wrt_clk2[11]);
    sync_wrtclk_rdptr_binary[7] <= ((((rd_ptr_wrt_clk2[7] ^ rd_ptr_wrt_clk2[8]) ^ rd_ptr_wrt_clk2[9]) ^ rd_ptr_wrt_clk2[10]) ^ rd_ptr_wrt_clk2[11]);
    sync_wrtclk_rdptr_binary[8] <= (((rd_ptr_wrt_clk2[8] ^ rd_ptr_wrt_clk2[9]) ^ rd_ptr_wrt_clk2[10]) ^ rd_ptr_wrt_clk2[11]);
    sync_wrtclk_rdptr_binary[9] <= ((rd_ptr_wrt_clk2[9] ^ rd_ptr_wrt_clk2[10]) ^ rd_ptr_wrt_clk2[11]);
    sync_wrtclk_rdptr_binary[10] <= (rd_ptr_wrt_clk2[10] ^ rd_ptr_wrt_clk2[11]);
    sync_wrtclk_rdptr_binary[11] <= rd_ptr_wrt_clk2[11];
    sync_wrtclk_rdptr_binary[12] <= rd_ptr_wrt_clk2[12];
end
always @(*) begin
    sync_rdclk_wrtptr_binary <= 13'd0;
    sync_rdclk_wrtptr_binary[0] <= (((((((((((wrt_ptr_rd_clk2[0] ^ wrt_ptr_rd_clk2[1]) ^ wrt_ptr_rd_clk2[2]) ^ wrt_ptr_rd_clk2[3]) ^ wrt_ptr_rd_clk2[4]) ^ wrt_ptr_rd_clk2[5]) ^ wrt_ptr_rd_clk2[6]) ^ wrt_ptr_rd_clk2[7]) ^ wrt_ptr_rd_clk2[8]) ^ wrt_ptr_rd_clk2[9]) ^ wrt_ptr_rd_clk2[10]) ^ wrt_ptr_rd_clk2[11]);
    sync_rdclk_wrtptr_binary[1] <= ((((((((((wrt_ptr_rd_clk2[1] ^ wrt_ptr_rd_clk2[2]) ^ wrt_ptr_rd_clk2[3]) ^ wrt_ptr_rd_clk2[4]) ^ wrt_ptr_rd_clk2[5]) ^ wrt_ptr_rd_clk2[6]) ^ wrt_ptr_rd_clk2[7]) ^ wrt_ptr_rd_clk2[8]) ^ wrt_ptr_rd_clk2[9]) ^ wrt_ptr_rd_clk2[10]) ^ wrt_ptr_rd_clk2[11]);
    sync_rdclk_wrtptr_binary[2] <= (((((((((wrt_ptr_rd_clk2[2] ^ wrt_ptr_rd_clk2[3]) ^ wrt_ptr_rd_clk2[4]) ^ wrt_ptr_rd_clk2[5]) ^ wrt_ptr_rd_clk2[6]) ^ wrt_ptr_rd_clk2[7]) ^ wrt_ptr_rd_clk2[8]) ^ wrt_ptr_rd_clk2[9]) ^ wrt_ptr_rd_clk2[10]) ^ wrt_ptr_rd_clk2[11]);
    sync_rdclk_wrtptr_binary[3] <= ((((((((wrt_ptr_rd_clk2[3] ^ wrt_ptr_rd_clk2[4]) ^ wrt_ptr_rd_clk2[5]) ^ wrt_ptr_rd_clk2[6]) ^ wrt_ptr_rd_clk2[7]) ^ wrt_ptr_rd_clk2[8]) ^ wrt_ptr_rd_clk2[9]) ^ wrt_ptr_rd_clk2[10]) ^ wrt_ptr_rd_clk2[11]);
    sync_rdclk_wrtptr_binary[4] <= (((((((wrt_ptr_rd_clk2[4] ^ wrt_ptr_rd_clk2[5]) ^ wrt_ptr_rd_clk2[6]) ^ wrt_ptr_rd_clk2[7]) ^ wrt_ptr_rd_clk2[8]) ^ wrt_ptr_rd_clk2[9]) ^ wrt_ptr_rd_clk2[10]) ^ wrt_ptr_rd_clk2[11]);
    sync_rdclk_wrtptr_binary[5] <= ((((((wrt_ptr_rd_clk2[5] ^ wrt_ptr_rd_clk2[6]) ^ wrt_ptr_rd_clk2[7]) ^ wrt_ptr_rd_clk2[8]) ^ wrt_ptr_rd_clk2[9]) ^ wrt_ptr_rd_clk2[10]) ^ wrt_ptr_rd_clk2[11]);
    sync_rdclk_wrtptr_binary[6] <= (((((wrt_ptr_rd_clk2[6] ^ wrt_ptr_rd_clk2[7]) ^ wrt_ptr_rd_clk2[8]) ^ wrt_ptr_rd_clk2[9]) ^ wrt_ptr_rd_clk2[10]) ^ wrt_ptr_rd_clk2[11]);
    sync_rdclk_wrtptr_binary[7] <= ((((wrt_ptr_rd_clk2[7] ^ wrt_ptr_rd_clk2[8]) ^ wrt_ptr_rd_clk2[9]) ^ wrt_ptr_rd_clk2[10]) ^ wrt_ptr_rd_clk2[11]);
    sync_rdclk_wrtptr_binary[8] <= (((wrt_ptr_rd_clk2[8] ^ wrt_ptr_rd_clk2[9]) ^ wrt_ptr_rd_clk2[10]) ^ wrt_ptr_rd_clk2[11]);
    sync_rdclk_wrtptr_binary[9] <= ((wrt_ptr_rd_clk2[9] ^ wrt_ptr_rd_clk2[10]) ^ wrt_ptr_rd_clk2[11]);
    sync_rdclk_wrtptr_binary[10] <= (wrt_ptr_rd_clk2[10] ^ wrt_ptr_rd_clk2[11]);
    sync_rdclk_wrtptr_binary[11] <= wrt_ptr_rd_clk2[11];
    sync_rdclk_wrtptr_binary[12] <= wrt_ptr_rd_clk2[12];
end
always @(*) begin
    full_1 <= 1'd0;
    if ((wrt_ptr[12] != sync_wrtclk_rdptr_binary[12])) begin
        if ((wrt_ptr[11:0] == sync_wrtclk_rdptr_binary[11:0])) begin
            full_1 <= 1'd1;
        end
    end
end
always @(*) begin
    empty_1 <= 1'd0;
    if ((rd_ptr == sync_rdclk_wrtptr_binary)) begin
        empty_1 <= 1'd1;
    end
    if ((empty_count <= 1'd1)) begin
        empty_1 <= 1'd1;
    end
end
always @(*) begin
    prog_full_1 <= 1'd0;
    if ((((wrt_ptr[11:0] + 11'd1037) - sync_wrtclk_rdptr_binary[11:0]) < 11'd1037)) begin
        prog_full_1 <= 1'd1;
    end
    if (full_1) begin
        prog_full_1 <= 1'd1;
    end
    if (((wrt_ptr[11:0] + 11'd1037) >= 11'd2047)) begin
        if ((wrt_ptr_reg[11:0] == sync_wrtclk_rdptr_binary[11:0])) begin
            prog_full_1 <= 1'd1;
        end
    end else begin
    end
end
always @(*) begin
    wrt_ptr_reg <= 13'd0;
    if (((wrt_ptr[11:0] + 11'd1037) >= 11'd2047)) begin
        wrt_ptr_reg[11:0] <= 1'd0;
    end else begin
        wrt_ptr_reg <= wrt_ptr;
    end
end
always @(*) begin
    prog_empty_1 <= 1'd0;
    if (((rd_ptr[11:0] + 5'd20) >= 11'd2047)) begin
        if ((rd_ptr_reg[11:0] == sync_rdclk_wrtptr_binary[11:0])) begin
            prog_empty_1 <= 1'd1;
        end
    end else begin
    end
    if ((((rd_ptr[11:0] + 5'd20) - sync_rdclk_wrtptr_binary[11:0]) < 5'd20)) begin
        prog_empty_1 <= 1'd1;
    end
    if (empty_1) begin
        prog_empty_1 <= 1'd1;
    end
end
always @(*) begin
    rd_ptr_reg <= 13'd0;
    if (((rd_ptr[11:0] + 5'd20) >= 11'd2047)) begin
        rd_ptr_reg[11:0] <= 1'd0;
    end else begin
        rd_ptr_reg <= rd_ptr;
    end
end
assign asyncfifo_re = (re | (~readable));
assign graycounter0_ce = (asyncfifo_writable & asyncfifo_we);
assign graycounter1_ce = (asyncfifo_readable & asyncfifo_re);
assign asyncfifo_writable = (((graycounter0_q[11] == consume_wdomain[11]) | (graycounter0_q[10] == consume_wdomain[10])) | (graycounter0_q[9:0] != consume_wdomain[9:0]));
assign asyncfifo_readable = (graycounter1_q != produce_rdomain);
assign wrport_adr = graycounter0_q_binary[10:0];
assign wrport_dat_w = asyncfifo_din;
assign wrport_we = graycounter0_ce;
assign rdport_adr = graycounter1_q_next_binary[10:0];
assign asyncfifo_dout = rdport_dat_r;
always @(*) begin
    graycounter0_q_next_binary <= 12'd0;
    if (graycounter0_ce) begin
        graycounter0_q_next_binary <= (graycounter0_q_binary + 1'd1);
    end else begin
        graycounter0_q_next_binary <= graycounter0_q_binary;
    end
end
assign graycounter0_q_next = (graycounter0_q_next_binary ^ graycounter0_q_next_binary[11:1]);
always @(*) begin
    graycounter1_q_next_binary <= 12'd0;
    if (graycounter1_ce) begin
        graycounter1_q_next_binary <= (graycounter1_q_binary + 1'd1);
    end else begin
        graycounter1_q_next_binary <= graycounter1_q_binary;
    end
end
assign graycounter1_q_next = (graycounter1_q_next_binary ^ graycounter1_q_next_binary[11:1]);
assign produce_rdomain = multiregimpl0_regs1;
assign consume_wdomain = multiregimpl1_regs1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge rd_clk) begin
    rd_en_flop <= rden;
    re <= rden;
    if (rd_en_flop) begin
        if ((~empty_1)) begin
            rd_ptr <= (rd_ptr + 1'd1);
        end
    end
    if (rd_en_flop) begin
        if ((rd_ptr[11:0] == 11'd2047)) begin
            if ((~empty_1)) begin
                rd_ptr[11:0] <= 1'd0;
                rd_ptr[12] <= (~rd_ptr[12]);
            end
        end
    end
    wrt_ptr_rd_clk1 <= gray_encoded_wrtptr;
    wrt_ptr_rd_clk2 <= wrt_ptr_rd_clk1;
    if ((empty_count < 2'd2)) begin
        empty_count <= (empty_count + 1'd1);
    end
    if (empty_1) begin
        if (rden) begin
            underflow_1 <= 1'd1;
        end else begin
            underflow_1 <= 1'd0;
        end
    end else begin
        underflow_1 <= 1'd0;
    end
    if ((re | (~readable))) begin
        dout1 <= asyncfifo_dout;
        readable <= asyncfifo_readable;
    end
    graycounter1_q_binary <= graycounter1_q_next_binary;
    graycounter1_q <= graycounter1_q_next;
    if (rd_rst) begin
        rd_ptr <= 13'd0;
        wrt_ptr_rd_clk1 <= 13'd0;
        wrt_ptr_rd_clk2 <= 13'd0;
        rd_en_flop <= 1'd0;
        empty_count <= 2'd0;
        underflow_1 <= 1'd0;
        re <= 1'd0;
        readable <= 1'd0;
        graycounter1_q <= 12'd0;
        graycounter1_q_binary <= 12'd0;
    end
    multiregimpl0_regs0 <= graycounter0_q;
    multiregimpl0_regs1 <= multiregimpl0_regs0;
end

always @(posedge wrt_clk) begin
    if (wren) begin
        if ((~full_1)) begin
            wr_en_1 <= 1'd1;
        end else begin
            wr_en_1 <= 1'd0;
        end
    end else begin
        wr_en_1 <= 1'd0;
    end
    if (wren) begin
        if ((~full_1)) begin
            wrt_ptr <= (wrt_ptr + 1'd1);
        end
    end
    if (wren) begin
        if ((wrt_ptr[11:0] == 11'd2047)) begin
            if ((~full_1)) begin
                wrt_ptr[11:0] <= 1'd0;
                wrt_ptr[12] <= (~wrt_ptr[12]);
            end
        end
    end
    rd_ptr_wrt_clk1 <= gray_encoded_rdptr;
    rd_ptr_wrt_clk2 <= rd_ptr_wrt_clk1;
    if (full_1) begin
        if (wren) begin
            overflow_1 <= 1'd1;
        end else begin
            overflow_1 <= 1'd0;
        end
    end else begin
        overflow_1 <= 1'd0;
    end
    graycounter0_q_binary <= graycounter0_q_next_binary;
    graycounter0_q <= graycounter0_q_next;
    if (wrt_rst) begin
        wrt_ptr <= 13'd0;
        rd_ptr_wrt_clk1 <= 13'd0;
        rd_ptr_wrt_clk2 <= 13'd0;
        overflow_1 <= 1'd0;
        graycounter0_q <= 12'd0;
        graycounter0_q_binary <= 12'd0;
        wr_en_1 <= 1'd0;
    end
    multiregimpl1_regs0 <= graycounter1_q;
    multiregimpl1_regs1 <= multiregimpl1_regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory storage: 2048-words x 36-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 36 
// Port 1 | Read: Sync  | Write: ---- | 
reg [35:0] storage[0:2047];
reg [35:0] storage_dat0;
reg [35:0] storage_dat1;
always @(posedge wrt_clk) begin
	if (wrport_we)
		storage[wrport_adr] <= wrport_dat_w;
	storage_dat0 <= storage[wrport_adr];
end
always @(posedge rd_clk) begin
	storage_dat1 <= storage[rdport_adr];
end
assign wrport_dat_r = storage_dat0;
assign rdport_dat_r = storage_dat1;


endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2023-07-12 11:47:54.
//------------------------------------------------------------------------------
